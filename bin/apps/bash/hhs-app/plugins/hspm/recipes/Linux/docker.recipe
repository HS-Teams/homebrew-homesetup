#!/usr/bin/env bash

function _about_() {
  echo "Docker makes container capabilities approachable and easy to use."
  return 0
}

function _depends_() {

  local tools

  tools=('apt-get' 'apt' 'yum' 'dnf' 'install')
  for pkg_man in "${tools[@]}"; do
    command -v "${pkg_man}" &>/dev/null && return 0
  done

  __hhs_errcho "hspm.bash: no suitable tool found to install default software on this machine. Tried: ${tools[*]}"

  return 1
}

function _install_() {

  local ret_val=1 https_tools=() docker_dl_url docker_pkgs=() source_dir

  arch="$(dpkg --print-architecture)"
  keyring_dir='/usr/share/keyrings'
  source_dir='/etc/apt/sources.list.d'
  docker_key="${keyring_dir}/docker.gpg"
  docker_dl_url='https://download.docker.com/linux/ubuntu'
  https_tools=('ca-certificates' 'curl' 'gnupg')
  docker_pkgs=('docker-ce' 'docker-ce-cli' 'containerd.io' 'docker-buildx-plugin' 'docker-compose-plugin')

  command -v sudo &>/dev/null && SUDO=sudo

  # 1. Execute the following command to uninstall all conflicting packages:
  echo "1. Uninstall all conflicting packages ..."
  for pkg in docker.io docker-doc docker-compose podman-docker containerd runc; do
    ${SUDO} "${HHS_MY_OS_PACKMAN}" -y remove "${pkg}" >/dev/null
  done

  # 2. Update the apt package index and install packages to allow apt to use a repository over HTTPS:
  echo "2. Update the apt package index and install packages to allow apt to use a repository over HTTPS ..."
  if ! ${SUDO} "${HHS_MY_OS_PACKMAN}" -y install "${https_tools[@]}" 1>/dev/null; then
    __hhs_errcho "hspm.bash: unable to install the required tools: [${https_tools[*]}]"
    return 1
  fi

  # 3. Add Docker’s official GPG key:
  if ${SUDO} install -m 0755 -d "${keyring_dir}"; then
    echo "3. Add Docker’s official GPG key ..."
    if curl -fsSL "${docker_dl_url}/gpg" | ${SUDO} gpg --dearmor -o "${docker_key}" >/dev/null; then
      if ${SUDO} chmod a+r "${docker_key}"; then
        ret_val=0
      fi
    fi
  fi

  if [[ $ret_val -ne 0 ]]; then
    __hhs_errcho "hspm.bash: unable to set official Docker GPG key"
    return 1
  fi

  # 4. Set up docker repository:
  echo "4. Set up docker repository ..."
  if ! echo "deb [arch=${arch} signed-by=${docker_key}] ${docker_dl_url} \
  "$(source /etc/os-release && echo "${VERSION_CODENAME}")" stable" |
    ${SUDO} tee "${source_dir}/docker.list" >/dev/null; then
    __hhs_errcho "hspm.bash: unable to set official Docker repository"
    return 1
  fi

  # 5. Update to apply the new repository:
  echo "5. Update to apply the new repository ..."
  if ${SUDO} "${HHS_MY_OS_PACKMAN}" update; then
    # 6. Install docker components
    if ${SUDO} "${HHS_MY_OS_PACKMAN}" -y install "${docker_pkgs[@]}"; then
      return 0
    fi
  fi

  return 1
}

function _uninstall_() {

  command -v sudo &>/dev/null && SUDO=sudo

  if command -v "${HHS_MY_OS_PACKMAN}" &>/dev/null && ${SUDO} "${HHS_MY_OS_PACKMAN}" -y remove "${docker_pkgs[@]}"; then
    return $?
  fi

  return 1
}
