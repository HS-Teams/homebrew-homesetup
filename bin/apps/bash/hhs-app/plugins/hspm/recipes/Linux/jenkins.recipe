#!/usr/bin/env bash

function _about_() {
  echo "An open source automation server which enables developers to reliably build, test, and deploy their software."
  return 0
}

function _install_() {

  local ret_val=1 arch keyring_dir source_dir key download_url packages https_tools

  arch="$(dpkg --print-architecture)"
  keyring_dir='/usr/share/keyrings'
  source_dir='/etc/apt/sources.list.d'
  key="${keyring_dir}/jenkins.asc"
  source_file="${source_dir}/jenkins.list"
  download_url='https://pkg.jenkins.io/debian-stable'
  packages=('jenkins' 'fontconfig' 'openjdk-11-jre')
  https_tools=('ca-certificates' 'curl' 'gnupg')

  command -v sudo &>/dev/null && SUDO=sudo

  # 1. Update the apt package index and install packages to allow apt to use a repository over HTTPS:
  echo "1. Update the apt package index and install packages to allow apt to use a repository over HTTPS ..."
  if ! ${SUDO} "${HHS_MY_OS_PACKMAN}" -y install "${https_tools[@]}" 1>/dev/null; then
    __hhs_errcho "hspm.bash: unable to install the required tools: [${https_tools[*]}]"
    return 1
  fi

  # 2. Add Jenkins’s official GPG key:
  echo "2. Add Jenkins’s official key ..."
  if ${SUDO} install -m 0755 -d "${keyring_dir}"; then
    if curl -fsSL "${download_url}/jenkins.io-2023.key" | ${SUDO} tee "${key}" >/dev/null; then
      if ${SUDO} chmod a+r "${key}"; then
        ret_val=0
      fi
    fi
  fi

  if [[ $ret_val -ne 0 ]]; then
    __hhs_errcho "hspm.bash: unable to set official Jenkins key"
    return 1
  fi

  # 3. Set up jenkins repository:
  echo "3. Set up jenkins repository ..."
  if ! ${SUDO} echo "deb [arch=${arch} signed-by=${key}] ${download_url} binary/" >"${source_file}"; then
    __hhs_errcho "hspm.bash: unable to set official Jenkins repository"
    return 1
  fi

  # 4. Update to apply the new repository:
  echo "4. Update to apply the new repository ..."
  if ${SUDO} "${HHS_MY_OS_PACKMAN}" update; then
    # 5. Install packages:
    echo "5. Install packages ..."
    if ${SUDO} "${HHS_MY_OS_PACKMAN}" -y install "${packages[@]}"; then
      return 0
    fi
  fi

  return 1
}

function _uninstall_() {

  local ret_val=1  keyring_dir source_dir key packages

  arch="$(dpkg --print-architecture)"
  keyring_dir='/usr/share/keyrings'
  source_dir='/etc/apt/sources.list.d'
  key="${keyring_dir}/jenkins.asc"
  source_file="${source_dir}/jenkins.list"
  download_url='https://pkg.jenkins.io/debian-stable'
  packages=('jenkins' 'fontconfig' 'openjdk-11-jre')

  command -v sudo &>/dev/null && SUDO=sudo

  echo "Removing packages ${packages[*]} ..."
  if ! ${SUDO} "${HHS_MY_OS_PACKMAN}" -y remove "${packages[@]}"; then
    __hhs_errcho "hspm.bash: unable to uninstall packages: ${packages[*]}"
    return 1
  fi

  [[ -f "${key}" ]] && ${SUDO} rm -f "${key}"
  [[ -f "${source_file}" ]] && ${SUDO} rm -f "${source_file}"

  if ${SUDO} "${HHS_MY_OS_PACKMAN}" update; then
    return 0
  fi

  return 1
}
