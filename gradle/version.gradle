/*
    Gradle Versioning extension

    Created: 5th March, 2022
    License: MIT - Please refer to <https://opensource.org/licenses/MIT>
    Copyright 2023, HomeSetup team
*/

/* Increment the build number for publishing */
task patchVersion(type: Task) {
  group = 'Versioning'
  description = 'Increment the build number for publishing'
  outputs.upToDateWhen { false }
  doLast {
    def ver = project.ext.app_version
    println "Increment the patch number for publishing"
    // (major.minor.patch)
    exec {
      commandLine rootProject.python, '-m', 'bumpver', 'update', '--patch'
    }
  }
}

/* Increment the minor version number (major.minor.patch) */
task updateMinor(type: Task) {
  group = 'Versioning'
  description = 'Increment the minor version number (major.minor.patch)'
  outputs.upToDateWhen { false }
  doLast {
    def ver = project.ext.app_version
    println "Increment the minor version number"
    exec {
      commandLine rootProject.python, '-m', 'bumpver', 'update', '--minor'
    }
  }
}

/* Increment the major version number (major.minor.patch) */
task updateMajor(type: Task) {
  group = 'Versioning'
  description = 'Increment the major version number (major.minor.patch)'
  outputs.upToDateWhen { false }
  doLast {
    def ver = project.ext.app_version
    println "Increment the major version number"
    exec {
      commandLine rootProject.python, '-m', 'bumpver', 'update', '--major'
    }
  }
}

/* Check current program version */
task version {
  group = 'Versioning'
  description = 'Display current project version'
  outputs.upToDateWhen { false }
  doLast { task ->
    println "Project: [$task.project.name] Version: $project.ext.app_version"
  }
}

/* List all properties from properties.gradle */
task listProperties {
  group = 'Versioning'
  description = 'List all properties from gradle.properties'
  outputs.upToDateWhen { false }
  doLast {
    def regex = /.*=.*$/
    File propsFile = project.file('gradle.properties')
    File depsFile = project.file('gradle/dependencies.gradle')
    if (propsFile.exists()) {
      println "\nChecking dependency usage at: $depsFile\n"
      propsFile.eachLine { line ->
        if (line?.trim() && line ==~ regex) {
          // Extract the name and version from line: '<property> = <value>'
          def (name, value) = line.tokenize('=')
          println "${name.padRight(40, ' ')} => ${value.padRight(10, ' ')}"
        }
      }
    }
  }
}
