/* Build a docker image with HomeSetup installed */
task dockerBuild(type: Task) {
  group = 'Docker'
  description = "Build a docker image with HomeSetup installed"
  doLast {
    def images = (project.findProperty('images') ?: 'ubuntu,fedora,centos,alpine').tokenize(',')
    def versionOutput = "python3 -V".execute().text.trim()
    def matcher = versionOutput =~ /Python (\d+)\.(\d+)\.(\d+)/
    if (!matcher.matches()) {
      throw new GradleException("Unable to parse python version: '${versionOutput}'")
    }

    def osOutput = "uname -s".execute().text.trim()
    def archOutput = "uname -m".execute().text.trim()
    def major = matcher[0][1].toInteger()
    def minor = matcher[0][2].toInteger()
    def pythonVersion = matcher ? "${major}.${minor}" : '3.11'
    def PYTHON3 = System.getenv('PYTHON3') ?: "${pythonVersion}"
    def PIP3 = System.getenv('PIP3') ?: "python3 -m pip -V".execute().text.trim()

    if (!(major == 3 && minor >= 10 && minor <= 12)) {
      throw new GradleException("Python version must be >= 3.10 and <= 3.12, found: ${versionString}")
    }

    println("Building docker images: ${images.flatten().toString()} ...")
    println("OS: ${osOutput}")
    println("Arch: ${archOutput}")
    println("Python: ${PYTHON3}  ${PIP3}")

    exec {
      commandLine "${project.rootDir}/bin/apps/bash/docker-build.bash", *images
    }
  }
}
