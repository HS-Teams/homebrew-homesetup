/*
    Gradle Bash extension

    Created: 5th March, 2022
    License: MIT - Please refer to <https://opensource.org/licenses/MIT>
    Copyright (c) 2025, HomeSetup team
*/

/* Helper Functions -------------------------------------------------------- */

String dirName(File file) {
  file.getParentFile().getPath()
}

/* Run all Bats tests */
task check(type: Task) {
  group = 'Verification'
  description = "Run all Bats test"
  doLast {
    println "Performing bats tests from $rootDir/tests"
    fileTree("$rootDir/tests").matching {
      include "*.bats"
    }.each { File file ->
      if (verbose) {
          println ""
          println "Executing bats tests from -> $file.name"
          println ""
        }
        exec {
          workingDir = dirName(file)
          commandLine 'bats', '--tap', file.path
        }
      }
  }
}

/* Run all Bats tests (wrapper) */
task test(type: Task) {
  group = 'Verification'
  description = "Run all Bats test"
  dependsOn check
}

/* Install HomeSetup */
task install(type: Task) {
  group = 'Install'
  description = "Install (repairing) HomeSetup"
  finalizedBy check
    doLast {
      exec {
        workingDir project.rootDir
        commandLine 'bash', '-x', 'install.bash', "-r"
      }
    }
}

/* Install HomeSetup */
task build(type: Task) {
  group = 'Build'
  description = "Install (repairing) HomeSetup"
  dependsOn install
}

/* Generate a changelog with the commits from last git tag */
task changelog(type: Task) {
  group = 'Publish'
  description = "Generate a changelog with the commits from last git tag"
  doLast {
    def out = new ByteArrayOutputStream()
    exec {
      commandLine 'git', 'describe', '--tags', '--abbrev=0', 'HEAD^'
      standardOutput = out
    }
    def lastTag = out.toString().trim()
    if (!lastTag) {
      raise new StopActionException("Unable to fetch latest tag")
    }
    out.reset()
    exec {
      commandLine 'git', 'log', '--oneline', "--pretty='%h %ad %s'", '--date=short', "${lastTag}..HEAD"
      standardOutput = out
      errorOutput = standardOutput
    }
    println("\nShowing changelog commits from: ${lastTag}")
    println("--------------------------------------------------------------------------------")
    out.each(s ->
      println(s)
    )
  }
}

/* Publish a new HomeSetup version */
task publish(type: Task) {
  group = 'Publish'
  description = "Publish a new HomeSetup version"
  if (!project.hasProperty('no-patch') || !Boolean.valueOf(project.getProperty('no-patch'))) {
    dependsOn patchVersion
  }
  doLast {
    def out = new ByteArrayOutputStream()
    def version = new File("${versionFile}").text
    println "Publishing HomeSetup v${version} ..."
    exec {
      commandLine 'git', 'log', '--pretty=format:%s', 'origin/master..HEAD'
      standardOutput = out
    }
    def commit_logs = out.toString()
    def prefix = commit_logs?.trim() ? commit_logs?.split('\n').size() + ' commits' : ' No commits'
    def commitMsg = "New HomeSetup revision: v'${version}' >> ${prefix}"
    def tag = project.hasProperty("tag") ? Boolean.valueOf(project.getProperty("tag")) : false;
    println("Revision commits: ${commitMsg}  Tag?= ${tag}")
    if (tag) {
      exec {
        commandLine 'git', 'tag', '-a', "v${version}", '-m', "New HomeSetup revision version ${version}"
      }
      exec {
        commandLine 'git', 'push', 'origin', "v${version}"
      }
    }
    exec {
      commandLine 'git', 'add', '-A', ':/'
    }
    exec {
      commandLine 'git', 'commit', '-m', "${commitMsg}"
    }
    exec {
      commandLine 'git', 'push', 'origin', 'HEAD'
    }
  }
}

/* Publish a new HomeSetup version */
task dockerBuild(type: Task) {
  group = 'Docker'
  description = "Build a docker image with HomeSetup installed"
  doLast {
    exec {
      commandLine "${project.rootDir}/bin/apps/bash/docker-build.bash", 'ubuntu'
    }
  }
}
