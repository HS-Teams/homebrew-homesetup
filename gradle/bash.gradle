/*
    Gradle Bash extension

    Created: 5th March, 2022
    License: MIT - Please refer to <https://opensource.org/licenses/MIT>
    Copyright 2023, HomeSetup team
*/

/* Helper Functions -------------------------------------------------------- */

String dirName(File file) {
  file.getParentFile().getPath()
}

/***** Verification Group */

/* Run all Bats tests */
task check(type: Task) {
  group = 'Verification'
  description = "Run all Bats test"
  doLast {
    println "Performing bats tests from $rootDir/tests"
    fileTree("$rootDir/tests").matching {
      include "**/*.bats"
    }.each { File file ->
      if (verbose) {
          println ""
          println "Executing bats tests from -> $file.name"
          println ""
        }
        exec {
          workingDir = dirName(file)
          commandLine 'bats', '--tap', file.path
        }
      }

  }
}

/* Publish a new HomeSetup version */
task publish(type: Task) {
  group = 'Publish'
  description = "Publish a new HomeSetup version"
  dependsOn patchVersion
  doLast {
    def out = new ByteArrayOutputStream()
    def version = new File("${versionFile}").text
    println "Publishing HomeSetup v${version} ..."
    exec {
      commandLine 'git', 'log', '--pretty=format:%s', 'origin/master..HEAD'
      standardOutput = out
    }
    def commit_logs = out.toString()
    def prefix = commit_logs?.trim() ? commit_logs?.split('\n').size() + ' commits' : ' No commits'
    def commitMsg = "New HomeSetup v'${version}':${prefix}"
    def tag = Boolean.valueOf(project.hasProperty("tag")) ? project.getProperty("tag") : false;
    println("Revision commits: $commitMsg")
    if (tag) {
      exec {
        commandLine 'git', 'tag', '-a', "v${version}", -m, "New HomeSetup revision version ${version}"
      }
      exec {
        commandLine 'git', 'push', 'origin', "v${version}"
      }
    }
    exec {
      commandLine 'git', 'add', '-A', ':/'
    }
    exec {
      commandLine 'git', 'commit', '-m', "$commitMsg"
    }
    exec {
      commandLine 'git', 'push', 'origin', 'HEAD'
    }
  }
}

/* end */
